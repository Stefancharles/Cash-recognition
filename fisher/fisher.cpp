// fisher.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。
//

#include <iostream>
using namespace std;
int mdata[8][60] = {
	{64,  67,  70,  71,  72,  73,  74,  75,  75,  75,
  75,  75,  75,  75,  75,  76,  75,  74,  72,  71,
  70,  69,  68,  68,  68,  69,  70,  70,  70,  70,
  70,  70,  71,  69,  67,  64,  63,  62,  62,  64,
  66,  69,  69,  68,  67,  67,  67,  67,  67,  67,
  68,  68,  69,  68,  67,  66,  66,  66,  67,  67},
{
76,  76,  75,  75,  75,  74,  73,  73,  74,  75,
  76,  76,  76,  75,  74,  74,  74,  75,  76,  76,
  74,  72,  70,  67,  65,  62,  60,  59,  58,  56,
  55,  53,  52,  51,  50,  49,  49,  49,  49,  50,
  51,  52,  52,  53,  53,  53,  53,  53,  53,  53,
  53,  53,  54,  54,  54,  54,  55,  55,  55,  55
},{
	99,  99,  98,  98,  98,  99,  99, 100, 100, 101,
 101, 100,  98,  98,  97,  98,  98,  98,  97,  94,
  90,  86,  82,  79,  79,  79,  79,  76,  73,  72,
  71,  71,  72,  72,  73,  72,  72,  72,  72,  72,
  72,  71,  71,  71,  73,  76,  80,  82,  83,  83,
  83,  83,  83,  82,  80,  75,  70,  67,  69,  72
},{
84,  85,  85,  84,  83,  82,  81,  82,  82,  83,
  83,  84,  84,  85,  85,  84,  84,  83,  81,  79,
  76,  73,  71,  70,  69,  67,  64,  62,  62,  64,
  65,  67,  68,  68,  66,  65,  64,  64,  64,  63,
  63,  64,  66,  67,  68,  69,  70,  71,  71,  69,
  67,  64,  61,  59,  57,  55,  54,  53,  53,  53
},
{
98,  98,  98,  99,  99, 100, 100, 101, 102, 102,
 102, 101, 100,  99,  98,  98,  98,  99,  99,  99,
  99,  99,  99,  99, 100, 101, 102, 101, 100,  98,
  98,  98,  98,  95,  92,  89,  87,  86,  86,  88,
  92,  95,  97,  97,  98,  98,  99, 100, 100, 100,
 100, 100, 100, 100,  99,  98,  97,  96,  96,  96
},
{
	95,  95,  94,  94,  93,  92,  92,  93,  94,  95,
  96,  96,  96,  96,  96,  96,  96,  97,  97,  96,
  96,  95,  96,  95,  95,  94,  94,  94,  93,  92,
  90,  90,  89,  87,  84,  82,  81,  80,  80,  82,
  85,  88,  88,  89,  89,  90,  91,  91,  91,  91,
  91,  90,  90,  89,  90,  90,  91,  92,  92,  92
},
{
	88,  88,  88,  88,  87,  88,  88,  90,  91,  92,
  91,  91,  90,  90,  90,  90,  91,  92,  92,  91,
  90,  89,  88,  87,  87,  87,  87,  87,  87,  87,
  88,  88,  88,  86,  84,  81,  80,  79,  79,  81,
  83,  86,  88,  89,  90,  90,  91,  91,  91,  91,
  90,  90,  89,  89,  87,  85,  83,  82,  83,  84
},
{
83,  82,  81,  79,  78,  78,  77,  77,  78,  80,
  82,  84,  83,  83,  81,  82,  83,  85,  86,  86,
  86,  86,  86,  86,  86,  86,  86,  86,  86,  86,
  86,  86,  87,  85,  82,  79,  77,  76,  76,  78,
  80,  83,  84,  85,  86,  86,  87,  86,  86,  85,
  84,  83,  81,  80,  79,  79,  78,  77,  77,  76
}
};
int mdata2[8][60] = {
	65,  65,  65,  64,  64,  65,  65,  65,  64,  64,
  64,  64,  65,  66,  67,  67,  66,  65,  65,  65,
  64,  63,  61,  60,  59,  58,  57,  57,  57,  57,
  56,  55,  54,  53,  53,  53,  53,  53,  54,  55,
  56,  57,  58,  57,  56,  56,  57,  59,  60,  62,
  62,  62,  59,  57,  55,  53,  51,  49,  47,  46,

  //2传感器:
  67,  67,  67,  67,  66,  66,  66,  67,  68,  69,
  70,  70,  70,  70,  69,  69,  68,  67,  67,  66,
  67,  66,  66,  65,  64,  63,  62,  60,  58,  55,
  52,  50,  48,  47,  47,  47,  47,  47,  47,  47,
  47,  47,  47,  46,  45,  44,  43,  43,  42,  42,
  41,  41,  42,  42,  42,  42,  43,  43,  43,  43,

  //3传感器:
  82,  81,  80,  80,  82,  87,  92,  96,  97,  98,
  98,  98,  97,  96,  95,  94,  94,  93,  92,  90,
  90,  89,  87,  84,  79,  75,  72,  71,  70,  69,
  69,  69,  69,  69,  69,  69,  69,  71,  73,  77,
  80,  83,  84,  85,  86,  87,  88,  89,  89,  89,
  89,  89,  87,  85,  79,  71,  63,  59,  59,  60,

  //4传感器:
  80,  81,  80,  81,  79,  79,  77,  78,  76,  77,
  76,  77,  76,  76,  75,  76,  76,  77,  75,  71,
  66,  61,  59,  57,  57,  57,  58,  58,  58,  58,
  57,  57,  56,  56,  56,  56,  56,  57,  58,  58,
  57,  57,  58,  59,  61,  64,  68,  69,  67,  63,
  59,  56,  54,  53,  52,  50,  48,  47,  47,  47,

  //5传感器:
  89,  90,  92,  95,  95,  95,  95,  96,  97,  97,
  97,  97,  97,  97,  96,  96,  95,  95,  95,  94,
  95,  96,  97,  97,  97,  98,  98,  99,  99,  99,
  97,  95,  93,  92,  91,  91,  92,  93,  95,  96,
  96,  96,  96,  95,  93,  91,  91,  93,  94,  95,
  96,  96,  96,  96,  96,  95,  96,  95,  95,  94,

  //6传感器:
  94,  94,  94,  94,  95,  95,  96,  96,  97,  97,
  97,  97,  97,  96,  95,  95,  96,  97,  97,  96,
  95,  93,  93,  92,  92,  92,  93,  94,  94,  94,
  92,  89,  87,  86,  85,  85,  85,  86,  87,  88,
  89,  90,  89,  88,  87,  87,  87,  87,  86,  86,
  86,  86,  87,  87,  88,  88,  88,  87,  86,  86,

  //7传感器:
  86,  86,  85,  85,  85,  87,  91,  94,  95,  95,
  95,  96,  96,  95,  94,  93,  93,  94,  94,  95,
  94,  95,  95,  96,  95,  95,  94,  94,  94,  94,
  92,  89,  86,  84,  83,  83,  85,  87,  90,  91,
  91,  93,  93,  94,  94,  94,  95,  95,  95,  95,
  95,  95,  95,  93,  89,  85,  81,  80,  80,  82,

  //8传感器:
  92,  92,  91,  91,  91,  91,  90,  89,  87,  87,
  87,  87,  86,  86,  86,  87,  88,  89,  90,  90,
  90,  90,  89,  87,  85,  84,  84,  85,  85,  86,
  85,  84,  83,  82,  82,  82,  82,  83,  83,  84,
  84,  86,  87,  89,  90,  91,  92,  92,  91,  90,
  89,  88,  86,  84,  82,  80,  80,  79,  79,  78,
};
#define num 8	//8个特征值
#define sample_num 60		//样本数
float m1[num];				//均值m1
float m2[num];				//均值m2
int X[sample_num][num];		//8个组一起
int X2[sample_num][num];	//特征X2
float sw1[num][num];		//sw1
float sw2[num][num];		//sw2
float sw[num][num];			//sw1+sw2
float sw_1[num][num];	//矩阵的逆
float m1_m2[num];	//m1-m2
float u[num];		
float avg_m1=0, avg_m2=0,yt=0;
float Pointy[sample_num];	//均值
float Pointy2[sample_num];

/*
	函数功能：求均值
*/
void getAvg(float m[],int data[num][sample_num]) {
	for (int i = 0; i < num; i++) {
		for (int j = 0; j < sample_num; j++) {
			m[i] += data[i][j];
		}
		m[i] = m[i] / sample_num;
	}
}
void getFeatureMat(int mm[sample_num][num], int data[num][sample_num]) {
	//原矩阵数量x特征
	//现在是特征x数量
	for (int i = 0; i < sample_num; i++) {
		for(int j=0;j<num;j++){
			mm[i][j] = data[j][i];
		}
	}
}
void getSw(float m[], int X[sample_num][num],float sw[num][num]) {

	float temp[8] = {0};	//中间矩阵
	cout << "m1 is " << m[0] << endl;
	for (int s = 0; s < sample_num; s++) {
		for (int k = 0; k < num; k++) {
			temp[k] = (X[s][k] - m[k]);
		}
		for (int i = 0; i < num; i++) {
			for (int j = 0; j < num; j++) {
				sw[i][j] += temp[i % 8] * temp[j % 8];
			}
			
		}
	}
	for (int i = 0; i < num; i++) {
		for (int j = 0; j < num; j++) {
			sw[i][j] = sw[i][j] / 59;
		}
	}
}
void getSwsum() {
	for (int i = 0; i < num; i++) {
		for (int j = 0; j < num; j++) {
			sw[i][j] = sw1[i][j] + sw2[i][j];
		}
	}
	//矩阵加法
}
void Gauss_Jordan(float matv[num][num], float matv1[num][num])
{
	int n = num;
	double mat[num][2* num], d;
	int i, j, l, k;
	/*
		矩阵扩展
	 */
	for (i = 0; i < n; i++) {
		for (j = 0; j < 2 * n; j++) {
			if (j < n)
				mat[i][j] = matv[i][j];
			else
				mat[i][j] = 0.0;
		}
	}
	/*
		扩展成单位矩阵
	*/
	for (i = 0; i < n; i++) mat[i][n + i] = 1.0;
	for (k = 0; k < n; k++) {
		//选取一个,取绝对值
		d = fabs(mat[k][k]);
		j = k;
		//按列选择
		for (i = k + 1; i < n; i++) {//选主元
			if (fabs(mat[i][k]) > d) {
				d = fabs(mat[i][k]);
				j = i;
			}
		}
		//找到一个最大值的下标
		if (j != k) { //交换
			for (l = 0; l < 2 * n; l++) {
				d = mat[j][l];	//最大列的第l个元素
				mat[j][l] = mat[k][l];	//最大行的第l个元素等于要换的那一行的第l个元素
				mat[k][l] = d;	//交换
			}
		}
		//交换好了
		//除以元素,此时k所在的行就是列最大元素所在的行.
		//除第一个元素外，除以其他元素
		for (j = k + 1; j < 2 * n; j++) {
			mat[k][j] /= mat[k][k];
		}
		/*
			这里i做i行,j为列
		 */
		for (i = 0; i < n; i++) {
			if (i == k) continue;	//本行不操作
			for (j = k + 1; j < 2 * n; j++) {
				mat[i][j] -= mat[i][k] * mat[k][j];
				//cout << "mat[" << i << "][" << j << "] is " << mat[i][j] << ",";
				//cout << "mat[" << i << "][" << k << "] is " << mat[i][k] << ",";
				//cout << "mat[" << k << "][" << j << "] is " << mat[k][j] << endl;
			}
		}
		/*for (int i = 0; i < n; i++) {
			for (int j = 0; j < 2*n; j++) {
				cout << mat[i][j] << " ";
			}
			cout << endl;
		}
		cout << endl;*/
	}
	for (i = 0; i < n; i++) {
		for (j = 0; j < n; j++) {
			matv1[i][j] = mat[i][j + n];
		}
	}
}
void get_m1_minus_m2() {
	for (int i = 0; i < num; i++) {
		m1_m2[i] = m1[i] - m2[i];
	}
	cout << "Function get_m1_minus_m2" << endl;
}
void get_u() {
	/*
		sw-1 是8x8的矩阵,m1_m2是8x1的矩阵。所以是8x1的矩阵,
	*/
	for (int i = 0; i < num; i++) {
		for (int j = 0; j < num; j++) {
			u[i] += sw_1[i][j] * m1_m2[j];
		}
	}
	for (int i = 0; i < num; i++) {
		cout << "u " << u[i] << ",";
	}
	cout << endl;
}
void get_avg_m1_m2_yt() {
	for (int i = 0; i < num; i++) {
		avg_m1 += u[i] * m1[i];
	}
	for (int i = 0; i < num; i++) {
		avg_m2 += u[i] * m2[i];
	}
	yt = (avg_m1 + avg_m2) / 2;
	cout << "avg_m1 is " << avg_m1 << endl;
	cout << "avg_m2 is " << avg_m2 << endl;
	cout << "yt is " << yt << endl;
}
void get_total_y() {
	//u*x;
	//cout << X[0][1] << endl;
	int l = 0;
	for (int i = 0; i < sample_num; i++) {
		for (int j = 0; j < num; j++) {
			Pointy[i] += u[j] * X[i][j];
			//Pointy[i][j] += u[j] * X[i][j];
			//l++;
			//if (l < 9)	cout << Pointy[i][j] << endl;
		}
	}
	for (int i = 0; i < sample_num; i++) {
		for (int j = 0; j < num; j++) {
			Pointy2[i] += u[j] * X2[i][j];
		}
	}
	for (int i = 0; i < sample_num; i++) {
		cout << Pointy[i] << ",";
		if (i % 8 == 0 &&i!=0)	cout << endl;
	}
	cout << endl;
	cout << endl;
	cout << endl;
	for (int i = 0; i < sample_num; i++) {
		cout << Pointy2[i] << ",";
		if (i % 8 == 0 && i != 0)	cout << endl;
	}
}
int main()
{

	getAvg(m1,mdata);	//求均值
	getAvg(m2,mdata2);	//求均值
	//dx1维.
	getFeatureMat(X, mdata);	//特征转换
	getFeatureMat(X2,mdata2);	//特征转换
	for (int i = 0; i < 8; i++) {
		cout << X2[0][i] << " " << endl;
	}
	getSw(m1, X,sw1);
	getSw(m2, X2, sw2);
	getSwsum();
	//double matv[num][num] = { {1,3,1},{2,1,1},{2,2,1} };
	//double matv1[num][num] = { 0 };
	Gauss_Jordan(sw,sw_1);
	get_m1_minus_m2();
	get_u();
	get_avg_m1_m2_yt();
	get_total_y();
}


void testfunction()
{
	cout << "This is a merge test" << endl;
}
